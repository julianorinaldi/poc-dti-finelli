@page "/microservicevehicle"

@using System.Net.Http
@using System.Net.Http.Json
@using FinelliDomainVehicle

@inject HttpClient Http

<h1>Veículos</h1>

<table class="tableCad">
    <tr>
        <td width="20">&nbsp;</td>
        <td>
            <h2>Cadastro de Veículos</h2>
        </td>
        <td>&nbsp;</td>
        <td align="right">
            <button class="btn btn-info" @onclick="New">Incluir</button>
        </td>
        <td width="10">&nbsp;</td>
    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>
<hr />
<form>
    <table class="form-group">
        <tr>
            <td>
                <label for="Id" class="control-label">Id</label>
            </td>
            <td>
                <input type="text" class="form-control" bind="@vehicle.Id" readonly />
            </td>
            <td width="20">&nbsp;</td>
            <td>
                <label for="Chassi" class="control-label">Chassi</label>
            </td>
            <td>
                <input type="text" class="form-control" bind="@vehicle.Chassi" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Capacity" class="control-label">Capacidade</label>
            </td>
            <td>
                <input type="text" class="form-control" bind="@vehicle.Capacity" />
            </td>
            <td width="20">&nbsp;</td>
            <td>
                <label for="Brand" class="control-label">Marca</label>
            </td>
            <td>
                <input type="text" class="form-control" bind="@vehicle.Brand" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Color" class="control-label">Cor</label>
            </td>
            <td>
                <input type="text" class="form-control" bind="@vehicle.Color" />
            </td>
        </tr>
        <tr>
            <td>
                <button type="submit" class="btn btn-success" @onclick="(async () => await Add())"
                        style="width:220px;">
                    Salvar
                </button>
            </td>
        </tr>
    </table>
</form>
<table class="tableGrid">
    <tr>
        <td width="20">&nbsp;</td>
        <td>
            <h2>Detalhes dos Veículos</h2>
        </td>
    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>

@if (_vehicles == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Chassi</th>
                <th>Capacidade</th>
                <th>Marca</th>
                <th>Cor</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _vehicles)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Chassi</td>
                    <td>@item.Capacity</td>
                    <td>@item.Brand</td>
                    <td>@item.Color</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(async () => await Edit(item.Id))"
                                style="width:110px;">
                            Editar
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="(async () => await Delete(item.Id))">
                            Deletar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    Vehicle[] _vehicles;

    Vehicle vehicle = new Vehicle();

    string addressApi = "192.168.0.103:8080";
    string apiSpecialist = "api/vehicle";

    protected override async Task OnInitializedAsync()
    {
        _vehicles = await Http.GetFromJsonAsync<Vehicle[]>($"{addressApi}/{apiSpecialist}");
    }

    protected void New()
    {
        vehicle = new Vehicle();
    }

    protected async Task Add()
    {
        if (String.IsNullOrWhiteSpace(vehicle.Id))
        {
            await Http.PostAsJsonAsync<Vehicle>($"{addressApi}/{apiSpecialist}", vehicle);
        }
        else
        {
            await Http.PutAsJsonAsync<Vehicle>($"{addressApi}/{apiSpecialist}/" + vehicle.Id, vehicle);
        }
        vehicle = new Vehicle();
        _vehicles = await Http.GetFromJsonAsync<Vehicle[]>($"{addressApi}/{apiSpecialist}");
    }

    protected async Task Edit(string id)
    {
        vehicle = await Http.GetFromJsonAsync<Vehicle>($"{addressApi}/{apiSpecialist}/" + id);
    }

    protected async Task Delete(string id)
    {
        await Http.DeleteAsync($"{addressApi}/{apiSpecialist}/" + id);
        _vehicles = await Http.GetFromJsonAsync<Vehicle[]>($"{addressApi}/{apiSpecialist}");
    }
}

<style>
    .tableCad {
        width: 100%;
        background: #05163D;
        color: honeydew
    }

    .tableGrid {
        width: 100%;
        background: #0A2464;
        color: honeydew
    }
</style>